rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User profiles - users can only access their own profile
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Spaces - users can access spaces they are members of
    match /spaces/{spaceId} {
      // Allow create for authenticated users (they become the owner and first member)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.owner &&
        request.auth.uid in request.resource.data.members;
      
      // Allow read for space members
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
        
      // Allow write for space members (for adding new members, updating settings, etc.)
      allow write: if request.auth != null && 
        request.auth.uid in resource.data.members;
    }
    
    // Knowledge entries - can be accessed by space members
    match /knowledge/{entryId} {
      // Allow create when user is member of the space they're adding to
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/spaces/$(request.resource.data.accountId)) &&
        request.auth.uid in get(/databases/$(database)/documents/spaces/$(request.resource.data.accountId)).data.members;
      
      // Allow read/write for existing entries when user is member of the space
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/spaces/$(resource.data.accountId)) &&
        request.auth.uid in get(/databases/$(database)/documents/spaces/$(resource.data.accountId)).data.members;
    }
    
    // Legacy: Accounts - keep for backward compatibility
    match /accounts/{accountId} {
      // Allow create for any authenticated user (when they're adding themselves to members)
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.members;
      
      // Allow read/write for existing members
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.members;
    }
  }
}